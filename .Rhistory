)
head(profiles) # preview
# The "range" attribute only applies to the case when powertrain == "Electric"
# To account for this, we have to do two things:
# 1) we need the range to be 0 when powertrain != "Electric"
# 2) we need to subtract away the minimum range level such that the value of
#    "0" reflects a reference level of 100 miles. Then the value for "range"
#    would mean the *additional* range beyond 100 miles.
profiles <- profiles %>%
mutate(
range = range - min(range),
range = ifelse(powertrain != "Electric", 0, range)) %>%
# Now remove any duplicate rows and re-label the profileIDs
distinct() %>%
mutate(profileID = seq(n()))
head(profiles) # preview
# Make a full-factorial design of experiment
design <- cbc_design(
profiles = profiles,
n_resp   = 1000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 8     # Number of questions per respondent
)
head(design) # preview
# Check that range is always 0 when powertrain == "Gasoline"
design %>%
count(range, powertrain)
# Save data
write_csv(design, here('data', 'survey_choices.csv'))
# Save data
write_csv(design, here('data', 'survey.csv'))
# Save data
write_csv(design, here('data','test1', 'survey.csv'))
# Save data
write_csv(design, here('test1','data', 'survey.csv'))
# Load libraries
library(cbcTools)
library(fastDummies)
library(tidyverse)
library(here)
# Define profiles with attributes and levels
profiles <- cbc_profiles(
price       = c(5,7.5,10,12.5,15,17.5,20),   # Price ($1,000)
# fuelEconomy = c(20, 25, 30),   # Fuel economy (mpg)
accelTime   = c(6, 7, 8,9),      # 0-60 mph acceleration time (s)
powertrain  = c("Gasoline", "Electric", "Plug-in Hybrid"),
range       = c(100, 150, 200, 250, 300, 350), # EV driving range
operating_cost = c(6,9,12,15,18,21),  # cents per mile
gas_efficiency = c(20,25,30,35,40,45,50,55,60) # equivalent gasoline efficiency (mpg equivalent)
)
# Define profiles with attributes and levels
profiles <- cbc_profiles(
price       = c(5,7.5,10,12.5,15,17.5,20),   # Price ($1,000)
# fuelEconomy = c(20, 25, 30),   # Fuel economy (mpg)
accelTime   = c(6, 7, 8,9),      # 0-60 mph acceleration time (s)
powertrain  = c("Gasoline", "Electric", "Plug-in Hybrid"),
range       = c(100, 150, 200, 250, 300, 350), # EV driving range
operating_cost = c(6,9,12,15,18,21),  # cents per mile
gas_efficiency = c(20,25,30,35,40,45,50,55,60) # equivalent gasoline efficiency (mpg equivalent)
)
head(profiles) # preview
View(profiles)
# The "range" attribute only applies to the case when powertrain == "Electric"
# To account for this, we have to do two things:
# 1) we need the range to be 0 when powertrain != "Electric"
# 2) we need to subtract away the minimum range level such that the value of
#    "0" reflects a reference level of 100 miles. Then the value for "range"
#    would mean the *additional* range beyond 100 miles.
profiles <- profiles %>%
mutate(
range = range - min(range),
range = ifelse(powertrain != "Electric", 0, range)) %>%
# Now remove any duplicate rows and re-label the profileIDs
distinct() %>%
mutate(profileID = seq(n()))
# The "range" attribute only applies to the case when powertrain == "Electric"
# To account for this, we have to do two things:
# 1) we need the range to be 0 when powertrain != "Electric"
# 2) we need to subtract away the minimum range level such that the value of
#    "0" reflects a reference level of 100 miles. Then the value for "range"
#    would mean the *additional* range beyond 100 miles.
profiles <- profiles %>%
mutate(
range = range - min(range),
range = ifelse(powertrain != "Electric", 0, range)) %>%
# Now remove any duplicate rows and re-label the profileIDs
distinct() %>%
mutate(profileID = seq(n()))
head(profiles) # preview
# Make a full-factorial design of experiment
design <- cbc_design(
profiles = profiles,
n_resp   = 1000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 8     # Number of questions per respondent
)
head(design) # preview
# Check that range is always 0 when powertrain == "Gasoline"
design %>%
count(range, powertrain)
# Save data
write_csv(design, here('test1','data', 'survey.csv'))
# Load libraries
library(cbcTools)
library(fastDummies)
library(tidyverse)
library(here)
library(tidyverse)
survey <- read_csv(here('test1','data', 'survey.csv'))
View(survey)
# Load libraries
library(cbcTools)
library(fastDummies)
library(tidyverse)
library(here)
library(tidyverse)
survey <- read_csv(here('test1','data', 'survey.csv'))
respondentID  <-sample(survey$respID, 1)
df<- survey %>% filter(respID == respondentID)
View(df)
df_json <- jsonlite::serializeJSON(df)
library(dplyr)
alts <- jsonlite::unserializeJSON(df_json) %>%
filter(qID == 1)
View(alts)
alt1 <- alts %>% filter(altID == 1)
alt2 <- alts %>% filter(altID == 2)
alt3 <- alts %>% filter(altID == 3)
View(alt1)
type<- alt1$powertrain
price <- alt1$price
acceltime <- alt1$accelTime
library(cbcTools)
library(fastDummies)
library(tidyverse)
library(here)
library(dplyr)
library(tidyverse)
survey <- read_csv(here('test1','data', 'survey.csv'))
respondentID  <-sample(survey$respID, 1)
df<- survey %>% filter(respID == respondentID)
df_json <- jsonlite::serializeJSON(df)
alts <- jsonlite::unserializeJSON(df_json) %>%
filter(qID == 1)
alt1 <- alts %>% filter(altID == 1)
alt2 <- alts %>% filter(altID == 2)
alt3 <- alts %>% filter(altID == 3)
type<- alt1$powertrain
price <- alt1$price
acceltime <- alt1$accelTime
# Define the option vector
html_buttons_option <- c("option_1", "option_2", "option_3")
# Change the names of each element to display markdown-formatted text
# and an embedded image using html
names(html_buttons_option)[1] <- "**Option 1**<br>
sd_question(
type   = 'mc_buttons',
id     = 'html_buttons',
label  = "A sample survey question using `mc_buttons`",
sd_question(
type   = 'mc_buttons',
id     = 'html_buttons',
label  = "A sample survey question using mc_buttons`",
option = html_buttons_option
)
sd_question(
type   = 'mc_buttons',
id     = 'html_buttons',
label  = "A sample survey question using mc_buttons`",
option = html_buttons_option
)
alts <- jsonlite::unserializeJSON(df_json) %>%
filter(qID == 1)
alt1 <- alts %>% filter(altID == 1)
alt2 <- alts %>% filter(altID == 2)
alt3 <- alts %>% filter(altID == 3)
type<- alt1$powertrain
price <- alt1$price
acceltime <- alt1$accelTime
# Define the option vector
html_buttons_option <- c("option_1", "option_2", "option_3")
# Change the names of each element to display markdown-formatted text
# and an embedded image using html
names(html_buttons_option)[1] <- "**Option 1**<br>
<img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/fuji.jpg' width=100><br>
**Type**: alt1$powertrain<br>
**Price**: alt1$price<br>
**Freshness**: alt1$accelTime"
names(html_buttons_option)[2] <- "**Option 2**<br>
<img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/pinkLady.jpg' width=100><br>
**Type**: Pink Lady<br>
**Price**: $ 1.5 / lb<br>
**Freshness**: Excellent"
names(html_buttons_option)[3] <- "**Option 3**<br>
<img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/honeycrisp.jpg' width=100><br>
**Type**: Honeycrisp<br>
**Price**: $ 2 / lb<br>
**Freshness**: Poor"
sd_question(
type   = 'mc_buttons',
id     = 'html_buttons',
label  = "A sample survey question using mc_buttons`",
option = html_buttons_option
)
# Define the option vector
html_buttons_option <- c("option_1", "option_2", "option_3")
# Change the names of each element to display markdown-formatted text
# and an embedded image using html
names(html_buttons_option)[1] <- "**Option 1**<br>
names(html_buttons_option)[2] <- "**Option 2**<br>
<img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/pinkLady.jpg' width=100><br>
**Type**: Pink Lady<br>
**Price**: $ 1.5 / lb<br>
**Freshness**: Excellent"
names(html_buttons_option)[3] <- "**Option 3**<br>
<img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/honeycrisp.jpg' width=100><br>
**Type**: Honeycrisp<br>
**Price**: $ 2 / lb<br>
**Freshness**: Poor"
sd_question(
type   = 'mc_buttons',
id     = 'html_buttons',
label  = "A sample survey question using mc_buttons`",
option = html_buttons_option
)
---
server: shiny
```{r}
# Load the package
library(surveydown)
# Run initial setup function (essential - do not delete)
sd_setup()
# Run initial setup function (essential - do not delete)
sd_setup()
::: {#welcome .sd-page}
# Welcome to our survey!
## Below are some basic questions about your primary vehicle
### Please answer to the best of your knowledge
```{r}
sd_question(
type  = 'select',
id    = 'acquire_primary_vehicle',
label = "How did you buy your primary vehicle?",
option = c(
"New" = "new",
"Used car from a dealer"           = "used_dealer",
"Used car informally"       = "used_informally",
"Received as a gift"               = "received_gift",
"Via move-in with someone who has a car"                    = "move_in_access",
"Do not remember or do not know"              = "do_not_remember"
)
)
sd_question(
type  = 'select',
id    = 'vehicle_leased',
label = "Is the vehicle leased?",
option = c(
"Yes" = "yes",
"No"  = "no",
"Don't Know"  = "dont_know"
)
)
sd_question(
type  = 'select',
id    = 'vehicle_cost',
label = "How much did you pay for this vehicle, to your best estimate?",
option = c(
"$4,999 or less" = "4999",
"$5,000 - $9,999" = "9999",
"$10,000 - $14,999" = "14999",
"$15,000 - $19,999" = "19999",
"$20,000 - $24,999"= "24999",
"$25,000 - $29,999"= "29999",
"$30,000 - $34,999"= "34999",
"$35,000 - $39,999" = "39999",
"$40,000 - $44,999"= "44999",
"$45,000 - $49,999"= "49999",
"$50,000 - $59,999"= "59999",
"$60,000 - $69,999" = "69999",
"$70,000 - $79,999"= "79999",
"$80,000 - $89,999"= "89999",
"$90,000 - $99,999"= "99999",
"100,000 or more" = "100000",
"Do not remember or do not know" = "do_not_remember"
)
)
sd_question(
type  = 'select',
id    = 'monthly_payment',
label = "What is your monthly payment?",
option = c(
"Paid all cash/no loan" = "0",
"$100 - $199" = "199",
"$200 - $299" = "299",
"$300 - $399" = "399",
"$400 - $499" = "499",
"$500 - $599" = "599",
"$600 - $699" = "699",
"$700 - $799" = "799",
"$800 - $899"= "899",
"$900 - $999"= "999",
"1,000 or more" = "1000",
"Do not remember or do not know" = "do_not_remember"
)
)
sd_question(
type  = 'select',
id    = 'gas_mileage',
label = "What gas mileage does your vehicle give?",
option = c(
"0 - 9.99 mpg" = "0",
"10 - 19.99 mpg" = "10",
"20 - 29.99 mpg" = "20",
"30 - 39.99 mpg" = "30",
"40 - 49.99 mpg" = "40",
"50 - 59.99 mpg" = "50",
"60 mpg and above" = "60",
"not applicable" = "not_applicable"
)
)
sd_question(
type  = 'select',
id    = 'refueling',
label = "How often do you refuel?",
option = c(
"once a month" = "0",
"once in two weeks" = "1",
"once a week" = "2",
"twice a week" = "3",
"three times a week" = "4",
"four times a week" = "5",
"over four times a week" = "6"
)
)
sd_question(
type  = 'mc_multiple',
id    = 'car_types',
label = "What type of cars do you have in your household? (Select all that apply)?",
option = c(
"Gasoline" = "Gasoline",
"Hybrid"     = "hybrid",
"Plug-in Hybrid"    = "plugin_hybrid",
"electric"          = "electric",
"other" =  "other"
)
)
sd_question(
type  = 'mc_multiple',
id    = 'parking',
label = "Where can you park at home? (Select all that apply)?",
option = c(
"Street Parking" = "Street_Parking",
"Driveway/ Carport"   = "Driveway_Carport",
"Single-family garage"  = "Single_family_garage",
"Shared parking garage" = "Shared_parking_garage",
"prefer not to say" = "prefer_not_to_say",
"other" =  "other"
)
)
sd_question(
type  = 'select',
id    = 'neighbor_ev_info',
label = "Do any of your neighbors own/lease a plug-in hybrid or pure electric vehicle (Select one)",
option = c(
"Yes" = "yes",
"No"  = "no",
"I'm not sure"  = "not_sure"
)
)
<br>
```{r}
survey <- read_csv(here('data', 'survey.csv'))
respondentID  <-sample(survey$respID, 1)
View(alt1)
# Load libraries
library(cbcTools)
library(fastDummies)
library(tidyverse)
library(here)
# Define profiles with attributes and levels
profiles <- cbc_profiles(
price       = c(5,7.5,10,12.5,15,17.5,20),   # Price ($1,000)
mileage = c(0-10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-90, 90-100, 100-150 ),   # mileage in 1000 miles interval
accelTime   = c(6, 7, 8,9),      # 0-60 mph acceleration time (s)
powertrain  = c("Gasoline", "Electric", "Plug-in Hybrid"),
range       = c(100, 150, 200, 250, 300, 350), # EV driving range
operating_cost = c(6,9,12,15,18,21),  # cents per mile
gas_efficiency = c(20,25,30,35,40,45,50,55,60) # equivalent gasoline efficiency (mpg equivalent)
)
head(profiles) # preview
# Load libraries
library(cbcTools)
library(fastDummies)
library(tidyverse)
library(here)
# Define profiles with attributes and levels
profiles <- cbc_profiles(
price       = c(5,7.5,10,12.5,15,17.5,20),   # Price ($1,000)
mileage = c(0-10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-90, 90-100, 100-150 ),   # mileage in 1000 miles interval
accelTime   = c(6, 7, 8,9),      # 0-60 mph acceleration time (s)
powertrain  = c("Gasoline", "Electric", "Plug-in Hybrid"),
range       = c(100, 150, 200, 250, 300, 350), # EV driving range
operating_cost = c(6,9,12,15,18,21),  # cents per mile
gas_efficiency = c(20,25,30,35,40,45,50,55,60) # equivalent gasoline efficiency (mpg equivalent)
)
head(profiles) # preview
# The "range" attribute only applies to the case when powertrain == "Electric"
# To account for this, we have to do two things:
# 1) we need the range to be 0 when powertrain != "Electric"
# 2) we need to subtract away the minimum range level such that the value of
#    "0" reflects a reference level of 100 miles. Then the value for "range"
#    would mean the *additional* range beyond 100 miles.
profiles <- profiles %>%
mutate(
range = range - min(range),
range = ifelse(powertrain != "Electric", 0, range)) %>%
# Now remove any duplicate rows and re-label the profileIDs
distinct() %>%
mutate(profileID = seq(n()))
head(profiles) # preview
# Make a full-factorial design of experiment
design <- cbc_design(
profiles = profiles,
n_resp   = 1000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 8     # Number of questions per respondent
)
head(design) # preview
# Check that range is always 0 when powertrain == "Gasoline"
design %>%
count(range, powertrain)
# Save data
write_csv(design, here('test1','data', 'survey.csv'))
# Make conjoint surveys using the cbcTools package
# Load libraries
library(cbcTools)
library(fastDummies)
library(tidyverse)
library(here)
# Define profiles with attributes and levels
profiles <- cbc_profiles(
price       = c(5,7.5,10,12.5,15,17.5,20),   # Price ($1,000)
mileage = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ),   # mileage in 1000 miles interval
accelTime   = c(6, 7, 8,9),      # 0-60 mph acceleration time (s)
powertrain  = c("Gasoline", "Electric", "Plug-in Hybrid"),
range       = c(100, 150, 200, 250, 300, 350), # EV driving range
operating_cost = c(6,9,12,15,18,21),  # cents per mile
gas_efficiency = c(20,25,30,35,40,45,50,55,60) # equivalent gasoline efficiency (mpg equivalent)
)
head(profiles) # preview
# The "range" attribute only applies to the case when powertrain == "Electric"
# To account for this, we have to do two things:
# 1) we need the range to be 0 when powertrain != "Electric"
# 2) we need to subtract away the minimum range level such that the value of
#    "0" reflects a reference level of 100 miles. Then the value for "range"
#    would mean the *additional* range beyond 100 miles.
profiles <- profiles %>%
mutate(
range = range - min(range),
range = ifelse(powertrain != "Electric", 0, range)) %>%
# Now remove any duplicate rows and re-label the profileIDs
distinct() %>%
mutate(profileID = seq(n()))
head(profiles) # preview
# Make a full-factorial design of experiment
design <- cbc_design(
profiles = profiles,
n_resp   = 1000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 8     # Number of questions per respondent
)
head(design) # preview
# Check that range is always 0 when powertrain == "Gasoline"
design %>%
count(range, powertrain)
# Save data
write_csv(design, here('test1','data', 'survey.csv'))
edit_r_environ()
usethis::edit_r_environ()
install.packages('rsconnect')
rsconnect::deployDoc("DAC_Conjoint.qmd")
rsconnect::setAccountInfo(name='l407cj-zain-hoda',
token='0B3D4D3476F5A60A9A75771D6A7B6855',
secret='nQAq4s6QXVHkYSPYk274eL6ao+p3cIUWA+XJKh0u')
rsconnect::setAccountInfo(name='l407cj-zain-hoda',
token='0B3D4D3476F5A60A9A75771D6A7B6855',
secret='nQAq4s6QXVHkYSPYk274eL6ao+p3cIUWA+XJKh0u')
rsconnect::deployDoc("DAC_Conjoint.qmd")
here
here
here()
library(rsconnect)
rsconnect::deployDoc("your_survey.qmd")
rsconnect::deployDoc("DAC_Conjoint.qmd")
rsconnect::deployDoc("test1\DAC_Conjoint.qmd")
rsconnect::deployDoc("test1\\DAC_Conjoint.qmd")
rsconnect::deployDoc("test1\\DAC_Conjoint.qmd")
usethis::edit_r_environ()
rsconnect::deployDoc("test1\\DAC_Conjoint.qmd")
rsconnect::deployDoc("test1\\DAC_Conjoint.qmd")
rsconnect::deployDoc("test1\\DAC_Conjoint.qmd")
usethis::edit_r_environ()
# To install the R package, run this in your R console:
remotes::install_github("jhelvy/surveydown", force = TRUE)
# To install the Quarto extension, run this in your R console:
surveydown::sd_update_extension()
# To define your surveydown password, run this in your R console:
# surveydown::sd_set_password("my_password")
# To check surveydown versions, run this in your R console:surveydown::sd_check_versions()
surveydown::sd_check_versions()
sd_question?
sd_question
